#!/usr/bin/env sh

set -e

command_exists() {
  command -v "$1" >/dev/null 2>&1
}

echo "Checking and installing dependencies..."

if ! command_exists docker; then
  echo "Docker not found. Please install Docker first: https://docs.docker.com/get-docker/"
  exit 1
else
  echo "docker command found, nice!"
fi

if ! command_exists kubectl; then
  echo "Installing kubectl, this is the cli for interacting with k8s"
  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  chmod +x kubectl
  sudo mv kubectl /usr/local/bin/
else
  echo "kubectl installed, this is the cli for interacting with k8s"
fi

if ! command_exists k9s; then
  echo "Installing k9s, this is kubectl with flair..."
  curl -sS https://webinstall.dev/k9s | bash
  export PATH="/home/$(whoami)/.local/bin:$PATH"
else
  echo "k9s installed, stylish!"
fi

if ! command_exists kind; then
  echo "Installing kind..."

  OS=$(uname -s | tr '[:upper:]' '[:lower:]')
  ARCH=$(uname -m)
  KIND_VERSION="v0.23.0"

  case $OS in
    linux)
      case $ARCH in
        x86_64)
          curl -Lo ./kind "https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-linux-amd64"
          ;;
        aarch64)
          curl -Lo ./kind "https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-linux-arm64"
          ;;
        *)
          echo "Unsupported architecture: $ARCH"
          exit 1
          ;;
      esac
      chmod +x ./kind
      sudo mv ./kind /usr/local/bin/kind
      ;;
    darwin)
      case $ARCH in
        x86_64)
          curl -Lo ./kind "https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-darwin-amd64"
          ;;
        arm64)
          curl -Lo ./kind "https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-darwin-arm64"
          ;;
        *)
          echo "Unsupported architecture: $ARCH"
          exit 1
          ;;
      esac
      chmod +x ./kind
      sudo mv ./kind /usr/local/bin/kind
      ;;
    *)
      echo "Unsupported operating system: $OS"
      exit 1
      ;;
  esac
fi

echo "dependencies installed, setting up cluster..."
read -p "Enter cluster name (default: kind): " CLUSTER_NAME
CLUSTER_NAME=${CLUSTER_NAME:-kind}

echo "creating local container registry..."
reg_name='kind-registry'
reg_port='5001'
if [ "$(docker inspect -f '{{.State.Running}}' "${reg_name}" 2>/dev/null || true)" != 'true' ]; then
  docker run \
    -d --restart=always -p "127.0.0.1:${reg_port}:5000" --network bridge --name "${reg_name}" \
    registry:2
fi

echo "Creating Kind cluster..."
cat <<EOF | kind create cluster --name "${CLUSTER_NAME}" --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
containerdConfigPatches:
- |-
  [plugins."io.containerd.grpc.v1.cri".registry]
    config_path = "/etc/containerd/certs.d"
EOF

echo "Configuring nodes..."
REGISTRY_DIR="/etc/containerd/certs.d/localhost:${reg_port}"
for node in $(kind get nodes --name "${CLUSTER_NAME}"); do
  echo "Configuring node: ${node}"
  if ! docker exec "${node}" mkdir -p "${REGISTRY_DIR}"; then
    echo "Failed to create directory on node ${node}. Continuing..."
  fi
  if ! cat <<EOF | docker exec -i "${node}" cp /dev/stdin "${REGISTRY_DIR}/hosts.toml"
[host."http://${reg_name}:5000"]
EOF
  then
    echo "Failed to copy hosts.toml to node ${node}. Continuing..."
  fi
done

echo "Connecting registry to kind network..."
if [ "$(docker inspect -f='{{json .NetworkSettings.Networks.kind}}' "${reg_name}")" = 'null' ]; then
  if ! docker network connect "kind" "${reg_name}"; then
    echo "Failed to connect registry to kind network. This may cause issues."
  fi
fi

echo "Creating ConfigMap..."
if ! cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-registry-hosting
  namespace: kube-public
data:
  localRegistryHosting.v1: |
    host: "localhost:${reg_port}"
    help: "https://kind.sigs.k8s.io/docs/user/local-registry/"
EOF
then
  echo "Failed to create ConfigMap. This may cause issues."
fi

echo "Setup complete. Running diagnostics..."
echo "Cluster Info:"
kubectl cluster-info --context "kind-${CLUSTER_NAME}"
echo "Nodes:"
kubectl get nodes
echo "Pods:"
kubectl get pods --all-namespaces

echo "To use this cluster, run:"
echo "kubectl cluster-info --context kind-${CLUSTER_NAME}"
echo "To delete this cluster, run:"
echo "kind delete cluster --name ${CLUSTER_NAME}"
